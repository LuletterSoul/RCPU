;main:
    ;mov interrupt.l, *int_low
    ;mov interrupt.h, *int_high
    ;call lcd_init
    ;push str.l
    ;push str.h
    ;call lcd_prints
    ;addi SP, 2
    ;halt

lcd_init: ; void lcd_init()
    push 38h
    call lcd_cmd
    push 0Fh
    call lcd_cmd
    push 01h
    call lcd_cmd
    push 06h
    call lcd_cmd
    addi SP, 4, SP
    ret

page_reg = FFFF1000h

lcd_prints: ; void lcd_prints(char *str)
    mov [4], *page_reg
    mov [5], A
lcd_prints_while1:
    mov *A, B
    jeq lcd_prints_while1_end
    push B
    call lcd_putc
    addi SP, 1, SP
    addi A, 1, A
    jmp lcd_prints_while1
lcd_prints_while1_end:
    ret

lcd_cmd: ; void lcd_prints(uint16 command)
    mov 0, *int_enable
    mov [4], A
    mov A, *lcd_data
    mov 0, *lcd_ctrl
    mov 1, *lcd_ctrl
    mov 0, *lcd_ctrl
    subi A, 4, A
    jge lcd_cmd_if1_end
    mov 181, C
lcd_cmd_do_while1:
    subi C, 1, C
    jge lcd_cmd_do_while1
lcd_cmd_if1_end:
    mov 4, *lcd_ctrl
    mov 1, *int_enable
    ret

lcd_putc: ; void lcd_putc(char c)
    mov 0, *int_enable
    mov [4], *lcd_data
    mov 5, *lcd_ctrl
    mov 4, *lcd_ctrl
    mov 8, C
lcd_putc_do_while1:
    subi C, 1, C
    jge lcd_putc_do_while1
    mov 1, *int_enable
    ret

lcd_data = FFFF0000h
lcd_ctrl = FFFF0001h
int_enable = FFFFFFFDh
